{
  "version": 3,
  "sources": ["../../earcut/src/earcut.js", "../../ol/webgl/RenderTarget.js", "../../ol/render/webgl/constants.js", "../../ol/render/webgl/utils.js", "../../ol/worker/webgl.js", "../../ol/renderer/webgl/PointsLayer.js", "../../ol/webgl/ShaderBuilder.js", "../../ol/layer/WebGLPoints.js", "dep:ol_layer_WebGLPoints"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n", "/**\n * @module ol/render/webgl/constants\n */\n\n/**\n * @enum {string}\n */\nexport const WebGLWorkerMessageType = {\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS',\n};\n\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {number} id Message id; will be used both in request and response as a means of identification\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Polygon render instructions raw binary buffer.\n * @property {number} [customAttributesCount] Amount of custom attributes count in the polygon render instructions.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\n */\n", "/**\n * @module ol/render/webgl/utils\n */\nimport earcut from 'earcut';\nimport {apply as applyTransform} from '../../transform.js';\nimport {clamp} from '../../math.js';\n\nconst tmpArray_ = [];\n\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\nconst bufferPositions_ = {vertexPosition: 0, indexPosition: 0};\n\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(\n  instructions,\n  elementIndex,\n  vertexBuffer,\n  indexBuffer,\n  customAttributesCount,\n  bufferPositions\n) {\n  // This is for x, y and index\n  const baseVertexAttrsCount = 3;\n  const baseInstructionsCount = 2;\n  const stride = baseVertexAttrsCount + customAttributesCount;\n\n  const x = instructions[elementIndex + 0];\n  const y = instructions[elementIndex + 1];\n\n  // read custom numerical attributes on the feature\n  const customAttrs = tmpArray_;\n  customAttrs.length = customAttributesCount;\n  for (let i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  const baseIndex = vPos / stride;\n\n  // push vertices for each of the four quad corners (first standard then custom attributes)\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n\n  return bufferPositions_;\n}\n\n/**\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\n * segment, in order to be able to offset the vertices correctly in the shader\n * @param {Float32Array} instructions Array of render instructions for lines.\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\n * @param {number} segmentEndIndex Index of the segment start point from which render instructions will be read.\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {Array<number>} customAttributes Array of custom attributes value\n * @param {import('../../transform.js').Transform} instructionsTransform Transform matrix used to project coordinates in instructions\n * @param {import('../../transform.js').Transform} invertInstructionsTransform Transform matrix used to project coordinates in instructions\n * @private\n */\nexport function writeLineSegmentToBuffers(\n  instructions,\n  segmentStartIndex,\n  segmentEndIndex,\n  beforeSegmentIndex,\n  afterSegmentIndex,\n  vertexArray,\n  indexArray,\n  customAttributes,\n  instructionsTransform,\n  invertInstructionsTransform\n) {\n  // compute the stride to determine how many vertices were already pushed\n  const baseVertexAttrsCount = 5; // base attributes: x0, y0, x1, y1, params (vertex number [0-3], join angle 1, join angle 2)\n  const stride = baseVertexAttrsCount + customAttributes.length;\n  const baseIndex = vertexArray.length / stride;\n\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\n  // Depending on whether there are points before and after the segment, its final shape\n  // will be different\n  const p0 = [\n    instructions[segmentStartIndex + 0],\n    instructions[segmentStartIndex + 1],\n  ];\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\n\n  // to compute offsets from the line center we need to reproject\n  // coordinates back in world units and compute the length of the segment\n  const p0world = applyTransform(invertInstructionsTransform, [...p0]);\n  const p1world = applyTransform(invertInstructionsTransform, [...p1]);\n\n  function computeVertexParameters(vertexNumber, joinAngle1, joinAngle2) {\n    const shift = 10000;\n    const anglePrecision = 1500;\n    return (\n      Math.round(joinAngle1 * anglePrecision) +\n      Math.round(joinAngle2 * anglePrecision) * shift +\n      vertexNumber * shift * shift\n    );\n  }\n\n  // compute the angle between p0pA and p0pB\n  // returns a value in [0, 2PI]\n  function angleBetween(p0, pA, pB) {\n    const lenA = Math.sqrt(\n      (pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1])\n    );\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\n    const orthoA = [-tangentA[1], tangentA[0]];\n    const lenB = Math.sqrt(\n      (pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1])\n    );\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\n\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\n    const angle =\n      lenA === 0 || lenB === 0\n        ? 0\n        : Math.acos(\n            clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1)\n          );\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\n    return !isClockwise ? Math.PI * 2 - angle : angle;\n  }\n\n  const joinBefore = beforeSegmentIndex !== null;\n  const joinAfter = afterSegmentIndex !== null;\n\n  let angle0 = 0;\n  let angle1 = 0;\n\n  // add vertices and adapt offsets for P0 in case of join\n  if (joinBefore) {\n    // B for before\n    const pB = [\n      instructions[beforeSegmentIndex],\n      instructions[beforeSegmentIndex + 1],\n    ];\n    const pBworld = applyTransform(invertInstructionsTransform, [...pB]);\n    angle0 = angleBetween(p0world, p1world, pBworld);\n  }\n  // adapt offsets for P1 in case of join\n  if (joinAfter) {\n    // A for after\n    const pA = [\n      instructions[afterSegmentIndex],\n      instructions[afterSegmentIndex + 1],\n    ];\n    const pAworld = applyTransform(invertInstructionsTransform, [...pA]);\n    angle1 = angleBetween(p1world, p0world, pAworld);\n  }\n\n  // add main segment triangles\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    p1[0],\n    p1[1],\n    computeVertexParameters(0, angle0, angle1)\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    p1[0],\n    p1[1],\n    computeVertexParameters(1, angle0, angle1)\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    p1[0],\n    p1[1],\n    computeVertexParameters(2, angle0, angle1)\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    p1[0],\n    p1[1],\n    computeVertexParameters(3, angle0, angle1)\n  );\n  vertexArray.push(...customAttributes);\n\n  indexArray.push(\n    baseIndex,\n    baseIndex + 1,\n    baseIndex + 2,\n    baseIndex + 1,\n    baseIndex + 3,\n    baseIndex + 2\n  );\n}\n\n/**\n * Pushes several triangles to form a polygon, including holes\n * @param {Float32Array} instructions Array of render instructions for lines.\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @return {number} Next polygon instructions index\n * @private\n */\nexport function writePolygonTrianglesToBuffers(\n  instructions,\n  polygonStartIndex,\n  vertexArray,\n  indexArray,\n  customAttributesCount\n) {\n  const instructionsPerVertex = 2; // x, y\n  const attributesPerVertex = 2 + customAttributesCount;\n  let instructionsIndex = polygonStartIndex;\n  const customAttributes = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + customAttributesCount\n  );\n  instructionsIndex += customAttributesCount;\n  const ringsCount = instructions[instructionsIndex++];\n  let verticesCount = 0;\n  const holes = new Array(ringsCount - 1);\n  for (let i = 0; i < ringsCount; i++) {\n    verticesCount += instructions[instructionsIndex++];\n    if (i < ringsCount - 1) {\n      holes[i] = verticesCount;\n    }\n  }\n  const flatCoords = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + verticesCount * instructionsPerVertex\n  );\n\n  // pushing to vertices and indices!! this is where the magic happens\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\n  for (let i = 0; i < result.length; i++) {\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\n  }\n  for (let i = 0; i < flatCoords.length; i += 2) {\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\n  }\n\n  return instructionsIndex + verticesCount * instructionsPerVertex;\n}\n\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n  const canvas = document.createElement('canvas');\n  const image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, array) {\n  array = array || [];\n  const radix = 256;\n  const divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n  array[2] = (Math.floor(id / radix) % radix) / divide;\n  array[3] = (id % radix) / divide;\n  return array;\n}\n\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n  let id = 0;\n  const radix = 256;\n  const mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\n", "\n        export function create() {\n          const source = \"const e=\\\"GENERATE_POLYGON_BUFFERS\\\",n=\\\"GENERATE_POINT_BUFFERS\\\",t=\\\"GENERATE_LINE_STRING_BUFFERS\\\",r=\\\"undefined\\\"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():\\\"\\\";r.includes(\\\"firefox\\\");r.includes(\\\"safari\\\")&&!r.includes(\\\"chrom\\\")&&(r.includes(\\\"version/15.4\\\")||/cpu (os|iphone os) 15_4 like mac os x/.test(r)),r.includes(\\\"webkit\\\")&&r.includes(\\\"edge\\\"),r.includes(\\\"macintosh\\\"),\\\"undefined\\\"!=typeof WorkerGlobalScope&&\\\"undefined\\\"!=typeof OffscreenCanvas&&(self,WorkerGlobalScope),function(){let e=!1;try{const n=Object.defineProperty({},\\\"passive\\\",{get:function(){e=!0}});window.addEventListener(\\\"_\\\",null,n),window.removeEventListener(\\\"_\\\",null,n)}catch(e){}}();class x extends Error{constructor(e){const n=\\\"Assertion failed. See https://openlayers.org/en/latest/doc/errors/#\\\"+e+\\\" for details.\\\";super(n),this.code=e,this.name=\\\"AssertionError\\\",this.message=n}}function o(e,n){const t=n[0],r=n[1];return n[0]=e[0]*t+e[2]*r+e[4],n[1]=e[1]*t+e[3]*r+e[5],n}function i(e,n){const t=(r=n)[0]*r[3]-r[1]*r[2];var r;!function(e,n){if(!e)throw new x(n)}(0!==t,32);const o=n[0],i=n[1],u=n[2],s=n[3],f=n[4],a=n[5];return e[0]=s/t,e[1]=-i/t,e[2]=-u/t,e[3]=o/t,e[4]=(u*a-s*f)/t,e[5]=-(o*a-i*f)/t,e}new Array(6);var u={exports:{}};function s(e,n,t){t=t||2;var r,x,o,i,u,s,c,v=n&&n.length,h=v?n[0]*t:e.length,y=f(e,0,h,t,!0),g=[];if(!y||y.next===y.prev)return g;if(v&&(y=function(e,n,t,r){var x,o,i,u=[];for(x=0,o=n.length;x<o;x++)(i=f(e,n[x]*r,x<o-1?n[x+1]*r:e.length,r,!1))===i.next&&(i.steiner=!0),u.push(w(i));for(u.sort(p),x=0;x<u.length;x++)t=a(t=d(u[x],t),t.next);return t}(e,n,y,t)),e.length>80*t){r=o=e[0],x=i=e[1];for(var b=t;b<h;b+=t)(u=e[b])<r&&(r=u),(s=e[b+1])<x&&(x=s),u>o&&(o=u),s>i&&(i=s);c=0!==(c=Math.max(o-r,i-x))?1/c:0}return l(y,g,t,r,x,c),g}function f(e,n,t,r,x){var o,i;if(x===O(e,n,t,r)>0)for(o=n;o<t;o+=r)i=k(o,e[o],e[o+1],i);else for(o=t-r;o>=n;o-=r)i=k(o,e[o],e[o+1],i);return i&&M(i,i.next)&&(z(i),i=i.next),i}function a(e,n){if(!e)return e;n||(n=e);var t,r=e;do{if(t=!1,r.steiner||!M(r,r.next)&&0!==A(r.prev,r,r.next))r=r.next;else{if(z(r),(r=n=r.prev)===r.next)break;t=!0}}while(t||r!==n);return n}function l(e,n,t,r,x,o,i){if(e){!i&&o&&function(e,n,t,r){var x=e;do{null===x.z&&(x.z=b(x.x,x.y,n,t,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==e);x.prevZ.nextZ=null,x.prevZ=null,function(e){var n,t,r,x,o,i,u,s,f=1;do{for(t=e,e=null,o=null,i=0;t;){for(i++,r=t,u=0,n=0;n<f&&(u++,r=r.nextZ);n++);for(s=f;u>0||s>0&&r;)0!==u&&(0===s||!r||t.z<=r.z)?(x=t,t=t.nextZ,u--):(x=r,r=r.nextZ,s--),o?o.nextZ=x:e=x,x.prevZ=o,o=x;t=r}o.nextZ=null,f*=2}while(i>1)}(x)}(e,r,x,o);for(var u,s,f=e;e.prev!==e.next;)if(u=e.prev,s=e.next,o?v(e,r,x,o):c(e))n.push(u.i/t),n.push(e.i/t),n.push(s.i/t),z(e),e=s.next,f=s.next;else if((e=s)===f){i?1===i?l(e=h(a(e),n,t),n,t,r,x,o,2):2===i&&y(e,n,t,r,x,o):l(a(e),n,t,r,x,o,1);break}}}function c(e){var n=e.prev,t=e,r=e.next;if(A(n,t,r)>=0)return!1;for(var x=e.next.next;x!==e.prev;){if(Z(n.x,n.y,t.x,t.y,r.x,r.y,x.x,x.y)&&A(x.prev,x,x.next)>=0)return!1;x=x.next}return!0}function v(e,n,t,r){var x=e.prev,o=e,i=e.next;if(A(x,o,i)>=0)return!1;for(var u=x.x<o.x?x.x<i.x?x.x:i.x:o.x<i.x?o.x:i.x,s=x.y<o.y?x.y<i.y?x.y:i.y:o.y<i.y?o.y:i.y,f=x.x>o.x?x.x>i.x?x.x:i.x:o.x>i.x?o.x:i.x,a=x.y>o.y?x.y>i.y?x.y:i.y:o.y>i.y?o.y:i.y,l=b(u,s,n,t,r),c=b(f,a,n,t,r),v=e.prevZ,h=e.nextZ;v&&v.z>=l&&h&&h.z<=c;){if(v!==e.prev&&v!==e.next&&Z(x.x,x.y,o.x,o.y,i.x,i.y,v.x,v.y)&&A(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,h!==e.prev&&h!==e.next&&Z(x.x,x.y,o.x,o.y,i.x,i.y,h.x,h.y)&&A(h.prev,h,h.next)>=0)return!1;h=h.nextZ}for(;v&&v.z>=l;){if(v!==e.prev&&v!==e.next&&Z(x.x,x.y,o.x,o.y,i.x,i.y,v.x,v.y)&&A(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;h&&h.z<=c;){if(h!==e.prev&&h!==e.next&&Z(x.x,x.y,o.x,o.y,i.x,i.y,h.x,h.y)&&A(h.prev,h,h.next)>=0)return!1;h=h.nextZ}return!0}function h(e,n,t){var r=e;do{var x=r.prev,o=r.next.next;!M(x,o)&&E(x,r,r.next,o)&&P(x,o)&&P(o,x)&&(n.push(x.i/t),n.push(r.i/t),n.push(o.i/t),z(r),z(r.next),r=e=o),r=r.next}while(r!==e);return a(r)}function y(e,n,t,r,x,o){var i=e;do{for(var u=i.next.next;u!==i.prev;){if(i.i!==u.i&&m(i,u)){var s=_(i,u);return i=a(i,i.next),s=a(s,s.next),l(i,n,t,r,x,o),void l(s,n,t,r,x,o)}u=u.next}i=i.next}while(i!==e)}function p(e,n){return e.x-n.x}function d(e,n){var t=function(e,n){var t,r=n,x=e.x,o=e.y,i=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var u=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(u<=x&&u>i){if(i=u,u===x){if(o===r.y)return r;if(o===r.next.y)return r.next}t=r.x<r.next.x?r:r.next}}r=r.next}while(r!==n);if(!t)return null;if(x===i)return t;var s,f=t,a=t.x,l=t.y,c=1/0;r=t;do{x>=r.x&&r.x>=a&&x!==r.x&&Z(o<l?x:i,o,a,l,o<l?i:x,o,r.x,r.y)&&(s=Math.abs(o-r.y)/(x-r.x),P(r,e)&&(s<c||s===c&&(r.x>t.x||r.x===t.x&&g(t,r)))&&(t=r,c=s)),r=r.next}while(r!==f);return t}(e,n);if(!t)return n;var r=_(t,e),x=a(t,t.next);return a(r,r.next),n===t?x:n}function g(e,n){return A(e.prev,e,n.prev)<0&&A(n.next,e,e.next)<0}function b(e,n,t,r,x){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-t)*x)|e<<8))|e<<4))|e<<2))|e<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-r)*x)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function w(e){var n=e,t=e;do{(n.x<t.x||n.x===t.x&&n.y<t.y)&&(t=n),n=n.next}while(n!==e);return t}function Z(e,n,t,r,x,o,i,u){return(x-i)*(n-u)-(e-i)*(o-u)>=0&&(e-i)*(r-u)-(t-i)*(n-u)>=0&&(t-i)*(o-u)-(x-i)*(r-u)>=0}function m(e,n){return e.next.i!==n.i&&e.prev.i!==n.i&&!function(e,n){var t=e;do{if(t.i!==e.i&&t.next.i!==e.i&&t.i!==n.i&&t.next.i!==n.i&&E(t,t.next,e,n))return!0;t=t.next}while(t!==e);return!1}(e,n)&&(P(e,n)&&P(n,e)&&function(e,n){var t=e,r=!1,x=(e.x+n.x)/2,o=(e.y+n.y)/2;do{t.y>o!=t.next.y>o&&t.next.y!==t.y&&x<(t.next.x-t.x)*(o-t.y)/(t.next.y-t.y)+t.x&&(r=!r),t=t.next}while(t!==e);return r}(e,n)&&(A(e.prev,e,n.prev)||A(e,n.prev,n))||M(e,n)&&A(e.prev,e,e.next)>0&&A(n.prev,n,n.next)>0)}function A(e,n,t){return(n.y-e.y)*(t.x-n.x)-(n.x-e.x)*(t.y-n.y)}function M(e,n){return e.x===n.x&&e.y===n.y}function E(e,n,t,r){var x=I(A(e,n,t)),o=I(A(e,n,r)),i=I(A(t,r,e)),u=I(A(t,r,n));return x!==o&&i!==u||(!(0!==x||!F(e,t,n))||(!(0!==o||!F(e,r,n))||(!(0!==i||!F(t,e,r))||!(0!==u||!F(t,n,r)))))}function F(e,n,t){return n.x<=Math.max(e.x,t.x)&&n.x>=Math.min(e.x,t.x)&&n.y<=Math.max(e.y,t.y)&&n.y>=Math.min(e.y,t.y)}function I(e){return e>0?1:e<0?-1:0}function P(e,n){return A(e.prev,e,e.next)<0?A(e,n,e.next)>=0&&A(e,e.prev,n)>=0:A(e,n,e.prev)<0||A(e,e.next,n)<0}function _(e,n){var t=new B(e.i,e.x,e.y),r=new B(n.i,n.x,n.y),x=e.next,o=n.prev;return e.next=n,n.prev=e,t.next=x,x.prev=t,r.next=t,t.prev=r,o.next=r,r.prev=o,r}function k(e,n,t,r){var x=new B(e,n,t);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function z(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function B(e,n,t){this.i=e,this.x=n,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,n,t,r){for(var x=0,o=n,i=t-r;o<t;o+=r)x+=(e[i]-e[o])*(e[o+1]+e[i+1]),i=o;return x}u.exports=s,u.exports.default=s,s.deviation=function(e,n,t,r){var x=n&&n.length,o=x?n[0]*t:e.length,i=Math.abs(O(e,0,o,t));if(x)for(var u=0,s=n.length;u<s;u++){var f=n[u]*t,a=u<s-1?n[u+1]*t:e.length;i-=Math.abs(O(e,f,a,t))}var l=0;for(u=0;u<r.length;u+=3){var c=r[u]*t,v=r[u+1]*t,h=r[u+2]*t;l+=Math.abs((e[c]-e[h])*(e[v+1]-e[c+1])-(e[c]-e[v])*(e[h+1]-e[c+1]))}return 0===i&&0===l?0:Math.abs((l-i)/i)},s.flatten=function(e){for(var n=e[0][0].length,t={vertices:[],holes:[],dimensions:n},r=0,x=0;x<e.length;x++){for(var o=0;o<e[x].length;o++)for(var i=0;i<n;i++)t.vertices.push(e[x][o][i]);x>0&&(r+=e[x-1].length,t.holes.push(r))}return t};const G=[],N={vertexPosition:0,indexPosition:0};function R(e,n,t,r,x){e[n+0]=t,e[n+1]=r,e[n+2]=x}function S(e,n,t,r,x,o){const i=3+x,u=e[n+0],s=e[n+1],f=G;f.length=x;for(let t=0;t<f.length;t++)f[t]=e[n+2+t];let a=o?o.vertexPosition:0,l=o?o.indexPosition:0;const c=a/i;return R(t,a,u,s,0),f.length&&t.set(f,a+3),a+=i,R(t,a,u,s,1),f.length&&t.set(f,a+3),a+=i,R(t,a,u,s,2),f.length&&t.set(f,a+3),a+=i,R(t,a,u,s,3),f.length&&t.set(f,a+3),a+=i,r[l++]=c,r[l++]=c+1,r[l++]=c+3,r[l++]=c+1,r[l++]=c+2,r[l++]=c+3,N.vertexPosition=a,N.indexPosition=l,N}function T(e,n,t,r,x,i,u,s,f,a){const l=5+s.length,c=i.length/l,v=[e[n+0],e[n+1]],h=[e[t],e[t+1]],y=o(a,[...v]),p=o(a,[...h]);function d(e,n,t){const r=1e4;return Math.round(1500*n)+Math.round(1500*t)*r+e*r*r}function g(e,n,t){const r=Math.sqrt((n[0]-e[0])*(n[0]-e[0])+(n[1]-e[1])*(n[1]-e[1])),x=[(n[0]-e[0])/r,(n[1]-e[1])/r],o=[-x[1],x[0]],i=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),u=[(t[0]-e[0])/i,(t[1]-e[1])/i],s=0===r||0===i?0:Math.acos((f=u[0]*x[0]+u[1]*x[1],a=-1,l=1,Math.min(Math.max(f,a),l)));var f,a,l;return u[0]*o[0]+u[1]*o[1]>0?s:2*Math.PI-s}const b=null!==x;let w=0,Z=0;if(null!==r){w=g(y,p,o(a,[...[e[r],e[r+1]]]))}if(b){Z=g(p,y,o(a,[...[e[x],e[x+1]]]))}i.push(v[0],v[1],h[0],h[1],d(0,w,Z)),i.push(...s),i.push(v[0],v[1],h[0],h[1],d(1,w,Z)),i.push(...s),i.push(v[0],v[1],h[0],h[1],d(2,w,Z)),i.push(...s),i.push(v[0],v[1],h[0],h[1],d(3,w,Z)),i.push(...s),u.push(c,c+1,c+2,c+1,c+3,c+2)}function U(e,n,t,r,x){const o=2+x;let i=n;const s=e.slice(i,i+x);i+=x;const f=e[i++];let a=0;const l=new Array(f-1);for(let n=0;n<f;n++)a+=e[i++],n<f-1&&(l[n]=a);const c=e.slice(i,i+2*a),v=u.exports(c,l,2);for(let e=0;e<v.length;e++)r.push(v[e]+t.length/o);for(let e=0;e<c.length;e+=2)t.push(c[e],c[e+1],...s);return i+2*a}const C=self;C.onmessage=r=>{const x=r.data;switch(x.type){case n:{const e=3,n=2,t=x.customAttributesCount,r=n+t,o=new Float32Array(x.renderInstructions),i=o.length/r,u=4*i*(t+e),s=new Uint32Array(6*i),f=new Float32Array(u);let a;for(let e=0;e<o.length;e+=r)a=S(o,e,f,s,t,a);const l=Object.assign({vertexBuffer:f.buffer,indexBuffer:s.buffer,renderInstructions:o.buffer},x);C.postMessage(l,[f.buffer,s.buffer,o.buffer]);break}case t:{const e=[],n=[],t=x.customAttributesCount,r=2,o=new Float32Array(x.renderInstructions);let u=0;const s=x.renderInstructionsTransform,f=[1,0,0,1,0,0];let a,l;for(i(f,s);u<o.length;){l=Array.from(o.slice(u,u+t)),u+=t,a=o[u++];for(let t=0;t<a-1;t++)T(o,u+t*r,u+(t+1)*r,t>0?u+(t-1)*r:null,t<a-2?u+(t+2)*r:null,e,n,l,0,f);u+=a*r}const c=Uint32Array.from(n),v=Float32Array.from(e),h=Object.assign({vertexBuffer:v.buffer,indexBuffer:c.buffer,renderInstructions:o.buffer},x);C.postMessage(h,[v.buffer,c.buffer,o.buffer]);break}case e:{const e=[],n=[],t=x.customAttributesCount,r=new Float32Array(x.renderInstructions);let o=0;for(;o<r.length;)o=U(r,o,e,n,t);const i=Uint32Array.from(n),u=Float32Array.from(e),s=Object.assign({vertexBuffer:u.buffer,indexBuffer:i.buffer,renderInstructions:r.buffer},x);C.postMessage(s,[u.buffer,i.buffer,r.buffer]);break}}};\";\n          return new Worker(typeof Blob === 'undefined'\n            ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\n            : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));\n        }\n      \n", "/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\nimport {AttributeType, DefaultUniform} from '../../webgl/Helper.js';\nimport {WebGLWorkerMessageType} from '../../render/webgl/constants.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {assert} from '../../asserts.js';\nimport {buffer, createEmpty, equals, getWidth} from '../../extent.js';\nimport {colorDecodeId, colorEncodeId} from '../../render/webgl/utils.js';\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\nimport {getUid} from '../../util.js';\nimport {listen, unlistenByKey} from '../../events.js';\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    this.ready = false;\n\n    this.sourceRevision_ = -1;\n\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    this.indicesBuffer_ = new WebGLArrayBuffer(\n      ELEMENT_ARRAY_BUFFER,\n      DYNAMIC_DRAW\n    );\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ =\n      options.hitFragmentShader && options.hitVertexShader ? true : false;\n\n    /**\n     * @private\n     */\n    this.hitVertexShader_ = options.hitVertexShader;\n\n    /**\n     * @private\n     */\n    this.hitFragmentShader_ = options.hitFragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.hitProgram_;\n\n    const customAttributes = options.attributes\n      ? options.attributes.map(function (attribute) {\n          return {\n            name: 'a_' + attribute.name,\n            size: 1,\n            type: AttributeType.FLOAT,\n          };\n        })\n      : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [\n      {\n        name: 'a_position',\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_index',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n    ].concat(customAttributes);\n\n    /**\n     * A list of attributes used for hit detection.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.hitDetectionAttributes = [\n      {\n        name: 'a_position',\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_index',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_hitColor',\n        size: 4,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_featureUid',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n    ].concat(customAttributes);\n\n    this.customAttributes = options.attributes ? options.attributes : [];\n\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * These instructions are used for hit detection\n     * @type {Float32Array}\n     * @private\n     */\n    this.hitRenderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.generateBuffersRun_ = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n\n    this.worker_.addEventListener(\n      'message',\n      /**\n       * @param {*} event Event.\n       * @this {WebGLPointsLayerRenderer}\n       */\n      function (event) {\n        const received = event.data;\n        if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          const projectionTransform = received.projectionTransform;\n          if (received.hitDetection) {\n            this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n            this.helper.flushBufferData(this.hitVerticesBuffer_);\n          } else {\n            this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n            this.helper.flushBufferData(this.verticesBuffer_);\n          }\n          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n          this.helper.flushBufferData(this.indicesBuffer_);\n\n          this.renderTransform_ = projectionTransform;\n          makeInverseTransform(\n            this.invertRenderTransform_,\n            this.renderTransform_\n          );\n          if (received.hitDetection) {\n            this.hitRenderInstructions_ = new Float32Array(\n              event.data.renderInstructions\n            );\n          } else {\n            this.renderInstructions_ = new Float32Array(\n              event.data.renderInstructions\n            );\n            if (received.generateBuffersRun === this.generateBuffersRun_) {\n              this.ready = true;\n            }\n          }\n\n          this.getLayer().changed();\n        }\n      }.bind(this)\n    );\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n\n    const source = this.getLayer().getSource();\n    this.sourceListenKeys_ = [\n      listen(\n        source,\n        VectorEventType.ADDFEATURE,\n        this.handleSourceFeatureAdded_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CHANGEFEATURE,\n        this.handleSourceFeatureChanged_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceFeatureDelete_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CLEAR,\n        this.handleSourceFeatureClear_,\n        this\n      ),\n    ];\n    source.forEachFeature(\n      function (feature) {\n        this.featureCache_[getUid(feature)] = {\n          feature: feature,\n          properties: feature.getProperties(),\n          geometry: feature.getGeometry(),\n        };\n        this.featureCount_++;\n      }.bind(this)\n    );\n  }\n\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_\n    );\n\n    if (this.hitDetectionEnabled_) {\n      this.hitProgram_ = this.helper.getProgram(\n        this.hitFragmentShader_,\n        this.hitVertexShader_\n      );\n\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n    this.featureCount_++;\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const projection = frameState.viewState.projection;\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    // FIXME fix hit detection isn't reliable when rendering multiple worlds\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const projectionExtent = projection.getExtent();\n\n    const extent = frameState.extent;\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n\n    const startWorld = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n\n    let world = startWorld;\n    const renderCount = this.indicesBuffer_.getSize();\n\n    do {\n      // apply the current projection transform with the invert of the one used to fill buffers\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent\n    );\n    const canvas = this.helper.getCanvas();\n\n    if (this.hitDetectionEnabled_) {\n      this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving =\n      !frameState.viewHints[ViewHint.ANIMATING] &&\n      !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n\n      const renderBuffer =\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n\n    // here we anticipate the amount of render instructions that we well generate\n    // this can be done since we know that for normal render we only have x, y as base instructions,\n    // and x, y, r, g, b, a and featureUid for hit render instructions\n    // and we also know the amount of custom attributes to append to these\n    const totalInstructionsCount =\n      (2 + this.customAttributes.length) * this.featureCount_;\n    if (\n      !this.renderInstructions_ ||\n      this.renderInstructions_.length !== totalInstructionsCount\n    ) {\n      this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n    }\n    if (this.hitDetectionEnabled_) {\n      const totalHitInstructionsCount =\n        (7 + this.customAttributes.length) * this.featureCount_;\n      if (\n        !this.hitRenderInstructions_ ||\n        this.hitRenderInstructions_.length !== totalHitInstructionsCount\n      ) {\n        this.hitRenderInstructions_ = new Float32Array(\n          totalHitInstructionsCount\n        );\n      }\n    }\n\n    // loop on features to fill the buffer\n    let featureCache, geometry;\n    const tmpCoords = [];\n    const tmpColor = [];\n    let renderIndex = 0;\n    let hitIndex = 0;\n    let hitColor;\n    for (const featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */ (\n        featureCache.geometry\n      );\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      applyTransform(projectionTransform, tmpCoords);\n\n      hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n\n      this.renderInstructions_[renderIndex++] = tmpCoords[0];\n      this.renderInstructions_[renderIndex++] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      let value;\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        value = this.customAttributes[j].callback(\n          featureCache.feature,\n          featureCache.properties\n        );\n        this.renderInstructions_[renderIndex++] = value;\n        if (this.hitDetectionEnabled_) {\n          this.hitRenderInstructions_[hitIndex++] = value;\n        }\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: 0,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesCount: this.customAttributes.length,\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    message['generateBuffersRun'] = ++this.generateBuffersRun_;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    if (this.hitDetectionEnabled_) {\n      const hitMessage = {\n        id: 0,\n        type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n        renderInstructions: this.hitRenderInstructions_.buffer,\n        customAttributesCount: 5 + this.customAttributes.length,\n      };\n      hitMessage['projectionTransform'] = projectionTransform;\n      hitMessage['hitDetection'] = true;\n      this.worker_.postMessage(hitMessage, [\n        this.hitRenderInstructions_.buffer,\n      ]);\n      this.hitRenderInstructions_ = null;\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    assert(this.hitDetectionEnabled_, 66);\n    if (!this.hitRenderInstructions_) {\n      return undefined;\n    }\n\n    const pixel = applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice()\n    );\n\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.hitRenderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the hit detection data to the corresponding render target\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderHitDetection(frameState, startWorld, endWorld, worldWidth) {\n    // skip render entirely if vertex buffers not ready/generated yet\n    if (!this.hitVerticesBuffer_.getSize()) {\n      return;\n    }\n\n    let world = startWorld;\n\n    this.hitRenderTarget_.setSize([\n      Math.floor(frameState.size[0] / 2),\n      Math.floor(frameState.size[1] / 2),\n    ]);\n\n    this.helper.useProgram(this.hitProgram_, frameState);\n    this.helper.prepareDrawToRenderTarget(\n      frameState,\n      this.hitRenderTarget_,\n      true\n    );\n\n    this.helper.bindBuffer(this.hitVerticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.hitDetectionAttributes);\n\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.layer_ = null;\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLPointsLayerRenderer;\n", "/**\n * Classes and utilities for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\n\nimport {\n  ValueTypes,\n  expressionToGlsl,\n  getStringNumberEquivalent,\n  uniformNameForVariable,\n} from '../style/expressions.js';\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSizeExpression('...')\n *   .outputSymbolFragmentShader();\n * ```\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings = [];\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sizeExpression = 'vec2(1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.rotationExpression = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.offsetExpression = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.colorExpression = 'vec4(1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.rotateWithView = false;\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings.push({\n      name: name,\n      type: type,\n      expression: expression,\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSizeExpression(expression) {\n    this.sizeExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setRotationExpression(expression) {\n    this.rotationExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * Note: will only be used for point geometry shaders.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.offsetExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setColorExpression(expression) {\n    this.colorExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression = expression;\n    return this;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.rotateWithView = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @return {string} Previously set size expression\n   */\n  getSizeExpression() {\n    return this.sizeExpression;\n  }\n\n  /**\n   * @return {string} Previously set symbol offset expression\n   */\n  getOffsetExpression() {\n    return this.offsetExpression;\n  }\n\n  /**\n   * @return {string} Previously set color expression\n   */\n  getColorExpression() {\n    return this.colorExpression;\n  }\n\n  /**\n   * @return {string} Previously set texture coordinate expression\n   */\n  getTextureCoordinateExpression() {\n    return this.texCoordExpression;\n  }\n\n  /**\n   * @return {string} Previously set fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression;\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters,\n   * intended to be used on point geometries.\n   *\n   * Three uniforms are hardcoded in all shaders: `u_projectionMatrix`, `u_offsetScaleMatrix`,\n   * `u_offsetRotateMatrix`, `u_time`.\n   *\n   * The following attributes are hardcoded and expected to be present in the vertex buffers:\n   * `vec2 a_position`, `float a_index` (being the index of the vertex in the quad, 0 to 3).\n   *\n   * The following varyings are hardcoded and gives the coordinate of the pixel both in the quad and on the texture:\n   * `vec2 v_quadCoord`, `vec2 v_texCoord`\n   *\n   * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables\n   * (namely, hit color with encoded feature id).\n   * @return {string} The full shader as a string.\n   */\n  getSymbolVertexShader(forHitDetection) {\n    const offsetMatrix = this.rotateWithView\n      ? 'u_offsetScaleMatrix * u_offsetRotateMatrix'\n      : 'u_offsetScaleMatrix';\n\n    let attributes = this.attributes;\n    let varyings = this.varyings;\n\n    if (forHitDetection) {\n      attributes = attributes.concat('vec4 a_hitColor');\n      varyings = varyings.concat({\n        name: 'v_hitColor',\n        type: 'vec4',\n        expression: 'a_hitColor',\n      });\n    }\n\n    return `precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n${this.uniforms\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\n${attributes\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n${varyings\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\nvoid main(void) {\n  mat4 offsetMatrix = ${offsetMatrix};\n  vec2 halfSize = ${this.sizeExpression} * 0.5;\n  vec2 offset = ${this.offsetExpression};\n  float angle = ${this.rotationExpression};\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = ${this.texCoordExpression};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n${varyings\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters,\n   * intended to be used on point geometries.\n   *\n   * Expects the following varyings to be transmitted by the vertex shader:\n   * `vec2 v_quadCoord`, `vec2 v_texCoord`\n   *\n   * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables\n   * (namely, hit color with encoded feature id).\n   * @return {string} The full shader as a string.\n   */\n  getSymbolFragmentShader(forHitDetection) {\n    const hitDetectionBypass = forHitDetection\n      ? '  if (gl_FragColor.a < 0.1) { discard; } gl_FragColor = v_hitColor;'\n      : '';\n\n    let varyings = this.varyings;\n\n    if (forHitDetection) {\n      varyings = varyings.concat({\n        name: 'v_hitColor',\n        type: 'vec4',\n        expression: 'a_hitColor',\n      });\n    }\n\n    return `precision mediump float;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n${this.uniforms\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n${varyings\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\nvoid main(void) {\n  if (${this.discardExpression}) { discard; }\n  gl_FragColor = ${this.colorExpression};\n  gl_FragColor.rgb *= gl_FragColor.a;\n${hitDetectionBypass}\n}`;\n  }\n}\n\n/**\n * @typedef {Object} StyleParseResult\n * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style\n * @property {Object<string,import(\"./Helper\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../renderer/webgl/PointsLayer\").CustomAttribute>} attributes Attribute descriptions.\n */\n\n/**\n * Parses a {@link import(\"../style/literal\").LiteralStyle} object and returns a {@link ShaderBuilder}\n * object that has been configured according to the given style, as well as `attributes` and `uniforms`\n * arrays to be fed to the `WebGLPointsRenderer` class.\n *\n * Also returns `uniforms` and `attributes` properties as expected by the\n * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @param {import(\"../style/literal\").LiteralStyle} style Literal style.\n * @return {StyleParseResult} Result containing shader params, attributes and uniforms.\n */\nexport function parseLiteralStyle(style) {\n  const symbStyle = style.symbol;\n  const size = symbStyle.size !== undefined ? symbStyle.size : 1;\n  const color = symbStyle.color || 'white';\n  const texCoord = symbStyle.textureCoord || [0, 0, 1, 1];\n  const offset = symbStyle.offset || [0, 0];\n  const opacity = symbStyle.opacity !== undefined ? symbStyle.opacity : 1;\n  const rotation = symbStyle.rotation !== undefined ? symbStyle.rotation : 0;\n\n  /**\n   * @type {import(\"../style/expressions.js\").ParsingContext}\n   */\n  const vertContext = {\n    inFragmentShader: false,\n    variables: [],\n    attributes: [],\n    stringLiteralsMap: {},\n    functions: {},\n  };\n  const parsedSize = expressionToGlsl(\n    vertContext,\n    size,\n    ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER\n  );\n  const parsedOffset = expressionToGlsl(\n    vertContext,\n    offset,\n    ValueTypes.NUMBER_ARRAY\n  );\n  const parsedTexCoord = expressionToGlsl(\n    vertContext,\n    texCoord,\n    ValueTypes.NUMBER_ARRAY\n  );\n  const parsedRotation = expressionToGlsl(\n    vertContext,\n    rotation,\n    ValueTypes.NUMBER\n  );\n\n  /**\n   * @type {import(\"../style/expressions.js\").ParsingContext}\n   */\n  const fragContext = {\n    inFragmentShader: true,\n    variables: vertContext.variables,\n    attributes: [],\n    stringLiteralsMap: vertContext.stringLiteralsMap,\n    functions: {},\n  };\n  const parsedColor = expressionToGlsl(fragContext, color, ValueTypes.COLOR);\n  const parsedOpacity = expressionToGlsl(\n    fragContext,\n    opacity,\n    ValueTypes.NUMBER\n  );\n\n  let opacityFilter = '1.0';\n  const visibleSize = `vec2(${expressionToGlsl(\n    fragContext,\n    size,\n    ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER\n  )}).x`;\n  switch (symbStyle.symbolType) {\n    case 'square':\n      break;\n    case 'image':\n      break;\n    // taken from https://thebookofshaders.com/07/\n    case 'circle':\n      opacityFilter = `(1.0-smoothstep(1.-4./${visibleSize},1.,dot(v_quadCoord-.5,v_quadCoord-.5)*4.))`;\n      break;\n    case 'triangle':\n      const st = '(v_quadCoord*2.-1.)';\n      const a = `(atan(${st}.x,${st}.y))`;\n      opacityFilter = `(1.0-smoothstep(.5-3./${visibleSize},.5,cos(floor(.5+${a}/2.094395102)*2.094395102-${a})*length(${st})))`;\n      break;\n\n    default:\n      throw new Error('Unexpected symbol type: ' + symbStyle.symbolType);\n  }\n\n  const builder = new ShaderBuilder()\n    .setSizeExpression(`vec2(${parsedSize})`)\n    .setRotationExpression(parsedRotation)\n    .setSymbolOffsetExpression(parsedOffset)\n    .setTextureCoordinateExpression(parsedTexCoord)\n    .setSymbolRotateWithView(!!symbStyle.rotateWithView)\n    .setColorExpression(\n      `vec4(${parsedColor}.rgb, ${parsedColor}.a * ${parsedOpacity} * ${opacityFilter})`\n    );\n\n  if (style.filter) {\n    const parsedFilter = expressionToGlsl(\n      fragContext,\n      style.filter,\n      ValueTypes.BOOLEAN\n    );\n    builder.setFragmentDiscardExpression(`!${parsedFilter}`);\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  // define one uniform per variable\n  fragContext.variables.forEach(function (varName) {\n    const uniformName = uniformNameForVariable(varName);\n    builder.addUniform(`float ${uniformName}`);\n    uniforms[uniformName] = function () {\n      if (!style.variables || style.variables[varName] === undefined) {\n        throw new Error(\n          `The following variable is missing from the style: ${varName}`\n        );\n      }\n      let value = style.variables[varName];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(vertContext, value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  });\n\n  if (symbStyle.symbolType === 'image' && symbStyle.src) {\n    const texture = new Image();\n    texture.crossOrigin =\n      symbStyle.crossOrigin === undefined ? 'anonymous' : symbStyle.crossOrigin;\n    texture.src = symbStyle.src;\n    builder\n      .addUniform('sampler2D u_texture')\n      .setColorExpression(\n        builder.getColorExpression() + ' * texture2D(u_texture, v_texCoord)'\n      );\n    uniforms['u_texture'] = texture;\n  }\n\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\n  fragContext.attributes.forEach(function (attrName) {\n    if (!vertContext.attributes.includes(attrName)) {\n      vertContext.attributes.push(attrName);\n    }\n    builder.addVarying(`v_${attrName}`, 'float', `a_${attrName}`);\n  });\n\n  // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.\n  vertContext.attributes.forEach(function (attrName) {\n    builder.addAttribute(`float a_${attrName}`);\n  });\n\n  return {\n    builder: builder,\n    attributes: vertContext.attributes.map(function (attributeName) {\n      return {\n        name: attributeName,\n        callback: function (feature, props) {\n          let value = props[attributeName];\n          if (typeof value === 'string') {\n            value = getStringNumberEquivalent(vertContext, value);\n          }\n          return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n        },\n      };\n    }),\n    uniforms: uniforms,\n  };\n}\n", "/**\n * @module ol/layer/WebGLPoints\n */\nimport Layer from './Layer.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {parseLiteralStyle} from '../webgl/ShaderBuilder.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'circle',\n *     size: 8,\n *     color: '#33AAFF',\n *     opacity: 0.9\n *   }\n * }\n * ```\n *\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'image',\n *     offset: [0, 12],\n *     size: [4, 8],\n *     src: '../static/exclamation-mark.png'\n *   }\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}\n     */\n    this.parseResult_ = parseLiteralStyle(options.style);\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = options.style.variables || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitVertexShader:\n        !this.hitDetectionDisabled_ &&\n        this.parseResult_.builder.getSymbolVertexShader(true),\n      hitFragmentShader:\n        !this.hitDetectionDisabled_ &&\n        this.parseResult_.builder.getSymbolFragmentShader(true),\n      uniforms: this.parseResult_.uniforms,\n      attributes: this.parseResult_.attributes,\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\nexport default WebGLPointsLayer;\n", "import d from \"./node_modules/ol/layer/WebGLPoints.js\";export default d;"],
  "mappings": "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",
  "names": ["earcut", "equals", "create", "Layer_default", "create", "equals"]
}
